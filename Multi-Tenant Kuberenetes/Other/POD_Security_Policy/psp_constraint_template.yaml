apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8spsp
spec:
  crd:
    spec:
      names:
        kind: K8sPSP
      validation:
        # Schema for the `parameters` field
        openAPIV3Schema:
          properties:
            allowedProfiles:
              type: array
              items:
                type: string
            allowedCapabilities:
              type: array
              items:
                type: string
            requiredDropCapabilities:
              type: array
              items:
                type: string
            allowedFlexVolumes:
              type: array
              items:
                type: object
                properties:
                  driver:
                    type: string
            forbiddenSysctls:
              type: array
              items:
                type: string
            rule:
              type: string
            ranges:
              type: array
              items:
                type: object
                properties:
                  min:
                    type: integer
                  max:
                    type: integer
            allowedHostPaths:
              type: array
              items:
                type: object
                properties:
                  readOnly:
                    type: boolean
                  pathPrefix:
                    type: string
            hostNetwork:
              type: boolean
            min:
              type: integer
            max:
              type: integer
            procMount:
              type: string
            allowedProfiles:
              type: array
              items:
                type: string
            allowedSELinuxOptions:
                type: object
                properties:
                    level:
                        type: string
                    role:
                        type: string
                    type:
                        type: string
                    user:
                        type: string
            runAsUser:
              type: object
              properties:
                rule:
                  type: string
                ranges:
                  type: array
                  items:
                    type: object
                    properties:
                      min:
                        type: integer
                      max:
                        type: integer
            volumes:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8spsp

        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            c.securityContext.privileged
            msg := sprintf("Privileged container is not allowed: %v, securityContext: %v", [c.name, c.securityContext])
        }

        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            input_allow_privilege_escalation(c)
            msg := sprintf("Privilege escalation container is not allowed: %v", [c.name])
        }

        violation[{"msg": msg, "details": {}}] {
            metadata := input.review.object.metadata
            container := input_containers[_]
            not input_apparmor_allowed(container, metadata)
            msg := sprintf("AppArmor profile is not allowed, pod: %v, container: %v. Allowed profiles: %v", [input.review.object.metadata.name, container.name, input.parameters.allowedProfiles])
        }

        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          has_disallowed_capabilities(container)
          msg := sprintf("container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])
        }
        violation[{"msg": msg}] {
          container := input.review.object.spec.containers[_]
          missing_drop_capabilities(container)
          msg := sprintf("container <%v> is not dropping all required capabilities. Container must drop all of %v", [container.name, input.parameters.requiredDropCapabilities])
        }
        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          has_disallowed_capabilities(container)
          msg := sprintf("init container <%v> has a disallowed capability. Allowed capabilities are %v", [container.name, get_default(input.parameters, "allowedCapabilities", "NONE")])
        }
        violation[{"msg": msg}] {
          container := input.review.object.spec.initContainers[_]
          missing_drop_capabilities(container)
          msg := sprintf("init container <%v> is not dropping all required capabilities. Container must drop all of %v", [container.name, input.parameters.requiredDropCapabilities])
        }
        violation[{"msg": msg, "details": {}}] {
          volume := input_flexvolumes[_]
          not input_flexvolumes_allowed(volume)
          msg := sprintf("FlexVolume %v is not allowed, pod: %v. Allowed drivers: %v", [volume, input.review.object.metadata.name, input.parameters.allowedFlexVolumes])
        }
        violation[{"msg": msg, "details": {}}] {
            sysctls := {x | x = input.review.object.spec.securityContext.sysctls[_][name]}
            count(sysctls) > 0
            input_sysctls(sysctls)
            msg := sprintf("One of the sysctls %v is not allowed, pod: %v. Forbidden sysctls: %v", [sysctls, input.review.object.metadata.name, input.parameters.forbiddenSysctls])
        }
        violation[{"msg": msg, "details": {}}] {
          spec := input.review.object.spec
          not input_fsGroup_allowed(spec)
          msg := sprintf("The provided pod spec fsGroup is not allowed, pod: %v. Allowed fsGroup: %v", [input.review.object.metadata.name, input.parameters])
        }
        violation[{"msg": msg, "details": {}}] {
            volume := input_hostpath_volumes[_]
            not input_hostpath_allowed(volume)
            msg := sprintf("HostPath volume %v is not allowed, pod: %v. Allowed path: %v", [volume, input.review.object.metadata.name, input.parameters.allowedHostPaths])
        }
        violation[{"msg": msg, "details": {}}] {
            input_share_hostnamespace(input.review.object)
            msg := sprintf("Sharing the host namespace is not allowed: %v", [input.review.object.metadata.name])
        }
        violation[{"msg": msg, "details": {}}] {
          input_share_hostnetwork(input.review.object)
          msg := sprintf("The specified hostNetwork and hostPort are not allowed, pod: %v. Allowed values: %v", [input.review.object.metadata.name, input.parameters])
        }
        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            not input_proc_mount_type_allowed(c)
            msg := sprintf("ProcMount type is not allowed, container: %v. Allowed procMount types: %v", [c.name, input.parameters.procMount])
        }
        violation[{"msg": msg, "details": {}}] {
            metadata := input.review.object.metadata
            not input_wildcard_allowed(metadata)
            container := input_containers[_]
            not input_container_allowed(metadata, container)
            msg := sprintf("Seccomp profile is not allowed, pod: %v, container: %v, Allowed profiles: %v", [metadata.name, container.name, input.parameters.allowedProfiles])
        }
        violation[{"msg": msg, "details": {}}] {
            c := input_containers[_]
            not input_seLinuxOptions_allowed(c.securityContext.seLinuxOptions)
            msg := sprintf("SELinux option is not allowed, pod: %v. Allowed options: %v", [input.review.object.metadata.name, input.parameters.allowedSELinuxOptions])
        }
        violation[{"msg": msg}] {
          rule := input.parameters.runAsUser.rule
          input_containers[input_container]
          provided_user := run_as_user(input_container, input.review)
          not accept_users(rule, provided_user)
          msg := sprintf("Container %v is attempting to run as disallowed user %v", [input_container.name, provided_user])
        }
        violation[{"msg": msg}] {
          rule := input.parameters.runAsUser.rule
          input_containers[input_container]
          not run_as_user(input_container, input.review)
          rule != "RunAsAny"
          msg := sprintf("Container %v is attempting to run without a required securityContext/runAsUser", [input_container.name])
        }
        violation[{"msg": msg, "details": {}}] {
          volume_fields := {x | input.review.object.spec.volumes[_][x]; x != "name"}
          not input_volume_type_allowed(volume_fields)
          msg := sprintf("One of the volume types %v is not allowed, pod: %v. Allowed volume types: %v", [volume_fields, input.review.object.metadata.name, input.parameters.volumes])
        }
        # * may be used to allow all volume types
        input_volume_type_allowed(volume_fields) {
          input.parameters.volumes[_] == "*"
        }
        input_volume_type_allowed(volume_fields) {
          allowed_set := {x | x = input.parameters.volumes[_]}
          test := volume_fields - allowed_set
          count(test) == 0
        }
        accept_users("RunAsAny", provided_user) {true}
        accept_users("MustRunAsNonRoot", provided_user) = res {res := provided_user != 0}
        accept_users("MustRunAs", provided_user) = res  {
          ranges := input.parameters.runAsUser.ranges
          matching := {1 | provided_user >= ranges[j].min; provided_user <= ranges[j].max}
          res := count(matching) > 0
        }
        run_as_user(container, review) = run_as_user {
          has_field(container, "securityContext")
          run_as_user := container.securityContext.runAsUser
        }
        run_as_user(container, review) = run_as_user {
          has_field(container, "securityContext")
          not container.securityContext.runAsUser
          review.kind.kind == "Pod"
          has_field(review.object.spec, "securityContext")
          run_as_user := review.object.spec.securityContext.runAsUser
        }
        input_seLinuxOptions_allowed(options) {
            input.parameters.allowedSELinuxOptions.level == options.level
        }
        input_seLinuxOptions_allowed(options) {
            input.parameters.allowedSELinuxOptions.role == options.role
        }
        input_seLinuxOptions_allowed(options) {
            input.parameters.allowedSELinuxOptions.type == options.type
        }
        input_seLinuxOptions_allowed(options) {
            input.parameters.allowedSELinuxOptions.user == options.user
        }
        input_wildcard_allowed(metadata) {
            input.parameters.allowedProfiles[_] == "*"
        }
        input_container_allowed(metadata, container) {
            not get_container_profile(metadata, container)
            metadata.annotations["seccomp.security.alpha.kubernetes.io/pod"] == input.parameters.allowedProfiles[_]
        }
        input_container_allowed(metadata, container) {
          profile := get_container_profile(metadata, container)
          profile == input.parameters.allowedProfiles[_]
        }
        get_container_profile(metadata, container) = profile {
          value := metadata.annotations[key]
            startswith(key, "container.seccomp.security.alpha.kubernetes.io/")
            [prefix, name] := split(key, "/")
            name == container.name
            profile = value
        }
        input_read_only_root_fs(c) {
            not has_field(c, "securityContext")
        }
        input_read_only_root_fs(c) {
            not c.securityContext.readOnlyRootFilesystem == true
        }
        input_proc_mount_type_allowed(c) {
            input.parameters.procMount == c.securityContext.procMount
        }
        input_share_hostnetwork(o) {
          not input.parameters.hostNetwork
          o.spec.hostNetwork
        }
        input_share_hostnetwork(o) {
          hostPort := input_containers[_].ports[_].hostPort
          hostPort < input.parameters.min
        }
        input_share_hostnetwork(o) {
          hostPort := input_containers[_].ports[_].hostPort
          hostPort > input.parameters.max
        }
        input_share_hostnamespace(o) {
            o.spec.hostPID
        }
        input_share_hostnamespace(o) {
            o.spec.hostIPC
        }
        input_hostpath_allowed(volume) {
            # An empty list means there is no restriction on host paths used
            input.parameters.allowedHostPaths == []
        }
        input_hostpath_allowed(volume) {
            allowedHostPath := input.parameters.allowedHostPaths[_]
            path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
            not allowedHostPath.readOnly == true
        }
        input_hostpath_allowed(volume) {
            allowedHostPath := input.parameters.allowedHostPaths[_]
            path_matches(allowedHostPath.pathPrefix, volume.hostPath.path)
            allowedHostPath.readOnly
            not writeable_input_volume_mounts(volume.name)
        }
        writeable_input_volume_mounts(volume_name) {
            container := input_containers[_]
            mount := container.volumeMounts[_]
            mount.name == volume_name
            not mount.readOnly
        }
        # This allows "/foo", "/foo/", "/foo/bar" etc., but
        # disallows "/fool", "/etc/foo" etc.
        path_matches(prefix, path) {
            a := split(trim(prefix, "/"), "/")
            b := split(trim(path, "/"), "/")
            prefix_matches(a, b)
        }
        prefix_matches(a, b) {
            count(a) <= count(b)
            not any_not_equal_upto(a, b, count(a))
        }
        any_not_equal_upto(a, b, n) {
            a[i] != b[i]
            i < n
        }
        input_hostpath_volumes[v] {
            v := input.review.object.spec.volumes[_]
            has_field(v, "hostPath")
        }
        input_fsGroup_allowed(spec) {
          # RunAsAny - No range is required. Allows any fsGroup ID to be specified.
          input.parameters.rule == "RunAsAny"
        }
        input_fsGroup_allowed(spec) {
          # MustRunAs - Validates pod spec fsgroup against all ranges
          input.parameters.rule == "MustRunAs"
          fg := spec.securityContext.fsGroup
          count(input.parameters.ranges) > 0
          range := input.parameters.ranges[_]
          value_within_range(range, fg)
        }
        input_fsGroup_allowed(spec) {
            # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
            input.parameters.rule == "MayRunAs"
            not has_field(spec, "securityContext")
        }
        input_fsGroup_allowed(spec) {
            # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
            input.parameters.rule == "MayRunAs"
            not spec.securityContext.fsGroup
        }
        input_fsGroup_allowed(spec) {
          # MayRunAs - Validates pod spec fsgroup against all ranges or allow pod spec fsgroup to be left unset
          input.parameters.rule == "MayRunAs"
          fg := spec.securityContext.fsGroup
          count(input.parameters.ranges) > 0
          range := input.parameters.ranges[_]
          value_within_range(range, fg)
        }
        value_within_range(range, value) {
          range.min <= value
          range.max >= value
        }
        
        # * may be used to forbid all sysctls
        input_sysctls(sysctls) {
            input.parameters.forbiddenSysctls[_] == "*"
        }
        input_sysctls(sysctls) {
            forbidden_sysctls := {x | x = input.parameters.forbiddenSysctls[_]}
            test := sysctls & forbidden_sysctls
            count(test) > 0
        }
        input_sysctls(sysctls) {
            prefix_matches(input.parameters.forbiddenSysctls[_], sysctls[_])
        }
        prefix_matches(prefix, sysctl) {
            contains(sysctl, trim(prefix, "*"))
        }
        input_flexvolumes_allowed(volume) {
          # An empty list means there is no restriction on flexVolume drivers used
          input.parameters.allowedFlexVolumes == []
        }
        input_flexvolumes_allowed(volume) {
          input.parameters.allowedFlexVolumes[_].driver == volume.flexVolume.driver
        }
        input_flexvolumes[v] {
          v := input.review.object.spec.volumes[_]
          has_field(v, "flexVolume")
        }
        
        has_disallowed_capabilities(container) {
          allowed := {c | c := input.parameters.allowedCapabilities[_]}
          not allowed["*"]
          capabilities := {c | c := container.securityContext.capabilities.add[_]}
          count(capabilities - allowed) > 0
        }
        missing_drop_capabilities(container) {
          must_drop := {c | c := input.parameters.requiredDropCapabilities[_]}
          dropped := {c | c := container.securityContext.capabilities.drop[_]}
          count(must_drop - dropped) > 0
        }
        get_default(obj, param, _default) = out {
          out = obj[param]
        }
        get_default(obj, param, _default) = out {
          not obj[param]
          not obj[param] == false
          out = _default
        }
        input_apparmor_allowed(container, metadata) {
            metadata.annotations[key] == input.parameters.allowedProfiles[_]
            key == sprintf("container.apparmor.security.beta.kubernetes.io/%v", [container.name])
        }

        input_allow_privilege_escalation(c) {
            not has_field(c, "securityContext")
        }
        input_allow_privilege_escalation(c) {
            not c.securityContext.allowPrivilegeEscalation == false
        }

        # has_field returns whether an object has a field
        has_field(object, field) = true {
            object[field]
        }

        input_containers[c] {
            c := input.review.object.spec.containers[_]
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
        }
        input_containers[c] {
            c := input.review.object.spec.containers[_]
            c.securityContext.procMount
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
            c.securityContext.procMount
        }
        input_containers[c] {
            c := input.review.object.spec.containers[_]
            has_field(c.securityContext, "seLinuxOptions")
        }
        input_containers[c] {
            c := input.review.object.spec.initContainers[_]
            has_field(c.securityContext, "seLinuxOptions")
        }